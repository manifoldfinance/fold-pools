{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["import {ethers} from 'ethers';\nimport {Pool} from '@uniswap/v3-sdk';\nimport {Token} from '@uniswap/sdk-core';\nimport {abi as IUniswapV3PoolABI} from '@uniswap/v3-core/artifacts/contracts/interfaces/IUniswapV3Pool.sol/IUniswapV3Pool.json';\nimport {abi as Multicall } from '@uniswap/v3-periphery/artifacts/contracts/interfaces/IMulticall.sol/IMulticall.json';\n\nconst provider = new ethers.providers.JsonRpcProvider(\n  'https://mainnet.infura.io/v3/3ff0c675dc614116aa126b14f6368971',\n);\n\nconst poolAddress = '0xe081eeab0adde30588ba8d5b3f6ae5284790f54a';\n\nconst poolContract = new ethers.Contract(poolAddress, IUniswapV3PoolABI, provider);\n\ninterface Immutables {\n  factory: string;\n  token0: string;\n  token1: string;\n  fee: number;\n  tickSpacing: number;\n  maxLiquidityPerTick: ethers.BigNumber;\n}\n\ninterface State {\n  liquidity: ethers.BigNumber;\n  sqrtPriceX96: ethers.BigNumber;\n  tick: number;\n  observationIndex: number;\n  observationCardinality: number;\n  observationCardinalityNext: number;\n  feeProtocol: number;\n  unlocked: boolean;\n}\n\nasync function getPoolImmutables() {\n  const immutables: Immutables = {\n    factory: await poolContract.factory(),\n    token0: await poolContract.token0(),\n    token1: await poolContract.token1(),\n    fee: await poolContract.fee(),\n    tickSpacing: await poolContract.tickSpacing(),\n    maxLiquidityPerTick: await poolContract.maxLiquidityPerTick(),\n  };\n  return immutables;\n}\n\nasync function getPoolState() {\n  const slot = await poolContract.slot0();\n  const PoolState: State = {\n    liquidity: await poolContract.liquidity(),\n    sqrtPriceX96: slot[0],\n    tick: slot[1],\n    observationIndex: slot[2],\n    observationCardinality: slot[3],\n    observationCardinalityNext: slot[4],\n    feeProtocol: slot[5],\n    unlocked: slot[6],\n  };\n  return PoolState;\n}\n\nasync function main() {\n  const immutables = await getPoolImmutables();\n  const state = await getPoolState();\n  const TokenB = new Token(1, immutables.token1, 6, 'USDC', 'USD Coin');\n  const TokenA = new Token(1, immutables.token0, 18, 'FOLD', 'Manifold Finance');\n\n  const poolExample = new Pool(\n    TokenA,\n    TokenB,\n    immutables.fee,\n    state.sqrtPriceX96.toString(),\n    state.liquidity.toString(),\n    state.tick,\n  );\n  console.log(poolExample);\n}\n\nmain();"],"names":["IUniswapV3PoolABI"],"mappings":";;;;;AAMA,MAAM,QAAA,GAAW,IAAI,MAAA,CAAO,SAAU,CAAA,eAAA;AAAA,EACpC,+DAAA;AACF,CAAA,CAAA;AAEA,MAAM,WAAc,GAAA,4CAAA,CAAA;AAEpB,MAAM,eAAe,IAAI,MAAA,CAAO,QAAS,CAAA,WAAA,EAAaA,KAAmB,QAAQ,CAAA,CAAA;AAsBjF,eAAe,iBAAoB,GAAA;AACjC,EAAA,MAAM,UAAyB,GAAA;AAAA,IAC7B,OAAA,EAAS,MAAM,YAAA,CAAa,OAAQ,EAAA;AAAA,IACpC,MAAA,EAAQ,MAAM,YAAA,CAAa,MAAO,EAAA;AAAA,IAClC,MAAA,EAAQ,MAAM,YAAA,CAAa,MAAO,EAAA;AAAA,IAClC,GAAA,EAAK,MAAM,YAAA,CAAa,GAAI,EAAA;AAAA,IAC5B,WAAA,EAAa,MAAM,YAAA,CAAa,WAAY,EAAA;AAAA,IAC5C,mBAAA,EAAqB,MAAM,YAAA,CAAa,mBAAoB,EAAA;AAAA,GAC9D,CAAA;AACA,EAAO,OAAA,UAAA,CAAA;AACT,CAAA;AAEA,eAAe,YAAe,GAAA;AAC5B,EAAM,MAAA,IAAA,GAAO,MAAM,YAAA,CAAa,KAAM,EAAA,CAAA;AACtC,EAAA,MAAM,SAAmB,GAAA;AAAA,IACvB,SAAA,EAAW,MAAM,YAAA,CAAa,SAAU,EAAA;AAAA,IACxC,cAAc,IAAK,CAAA,CAAA,CAAA;AAAA,IACnB,MAAM,IAAK,CAAA,CAAA,CAAA;AAAA,IACX,kBAAkB,IAAK,CAAA,CAAA,CAAA;AAAA,IACvB,wBAAwB,IAAK,CAAA,CAAA,CAAA;AAAA,IAC7B,4BAA4B,IAAK,CAAA,CAAA,CAAA;AAAA,IACjC,aAAa,IAAK,CAAA,CAAA,CAAA;AAAA,IAClB,UAAU,IAAK,CAAA,CAAA,CAAA;AAAA,GACjB,CAAA;AACA,EAAO,OAAA,SAAA,CAAA;AACT,CAAA;AAEA,eAAe,IAAO,GAAA;AACpB,EAAM,MAAA,UAAA,GAAa,MAAM,iBAAkB,EAAA,CAAA;AAC3C,EAAM,MAAA,KAAA,GAAQ,MAAM,YAAa,EAAA,CAAA;AACjC,EAAM,MAAA,MAAA,GAAS,IAAI,KAAM,CAAA,CAAA,EAAG,WAAW,MAAQ,EAAA,CAAA,EAAG,QAAQ,UAAU,CAAA,CAAA;AACpE,EAAM,MAAA,MAAA,GAAS,IAAI,KAAM,CAAA,CAAA,EAAG,WAAW,MAAQ,EAAA,EAAA,EAAI,QAAQ,kBAAkB,CAAA,CAAA;AAE7E,EAAA,MAAM,cAAc,IAAI,IAAA;AAAA,IACtB,MAAA;AAAA,IACA,MAAA;AAAA,IACA,UAAW,CAAA,GAAA;AAAA,IACX,KAAA,CAAM,aAAa,QAAS,EAAA;AAAA,IAC5B,KAAA,CAAM,UAAU,QAAS,EAAA;AAAA,IACzB,KAAM,CAAA,IAAA;AAAA,GACR,CAAA;AACA,EAAA,OAAA,CAAQ,IAAI,WAAW,CAAA,CAAA;AACzB,CAAA;AAEA,IAAK,EAAA"}